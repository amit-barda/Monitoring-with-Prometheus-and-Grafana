# Define the API version and kind for this resource
apiVersion: v1
kind: ConfigMap

# Metadata for the ConfigMap
metadata:
  # Name of the ConfigMap
  name: grafana-dashboard
  
  # Namespace where the ConfigMap will be created
  namespace: monitoring

# Data section containing the Grafana dashboard JSON
data:
  # The name of the Grafana dashboard JSON inside the ConfigMap
  kubernetes-cluster-monitoring-dashboard.json: |
    
    # Start of the Grafana dashboard JSON
    {
      # Dashboard metadata and settings
      "dashboard": {
        # ID for the dashboard (null means it will be assigned by Grafana)
        "id": null,

        # Title of the dashboard
        "title": "Kubernetes Cluster Monitoring",

        # Tags for filtering dashboards
        "tags": [],

        # Use the browser timezone for displaying data
        "timezone": "browser",

        # Schema version for compatibility
        "schemaVersion": 32,

        # Version of the dashboard, useful for tracking changes
        "version": 1,

        # Define dashboard variables (templating)
        "templating": {
          "list": [
            # Node variable for selecting nodes
            {
              # Type of variable: Query
              "type": "query",
              # Variable name
              "name": "node",
              # Label displayed in Grafana
              "label": "Node",
              # Prometheus query to fetch the list of nodes
              "query": "label_values(node_info, instance)",
              # Datasource used for the query
              "datasource": "Prometheus",
              # How often the variable should refresh
              "refresh": 1
            },
            # Namespace variable for selecting namespaces
            {
              "type": "query",
              "name": "namespace",
              "label": "Namespace",
              "query": "label_values(kube_namespace_labels, namespace)",
              "datasource": "Prometheus",
              "refresh": 1
            },
            # Pod variable for selecting pods
            {
              "type": "query",
              "name": "pod",
              "label": "Pod",
              "query": "label_values(kube_pod_info, pod)",
              "datasource": "Prometheus",
              "refresh": 1
            },
            # Container variable for selecting containers
            {
              "type": "query",
              "name": "container",
              "label": "Container",
              "query": "label_values(container_name, container)",
              "datasource": "Prometheus",
              "refresh": 1
            }
          ]
        }
      },

      # Annotations section for marking specific events in the time series
      "annotations": {
        "list": []
      },

      # Define the individual panels in the dashboard
      "panels": [
        # Panel for displaying the number of pods running on the selected node
        {
          # Title of the panel
          "title": "Pods Running on Node",

          # Type of panel (stat for a single value display)
          "type": "stat",

          # Prometheus query to count the number of pods on the node
          "targets": [
            {
              "expr": "count(kube_pod_info{node=\"$node\"})",
              "legendFormat": "{{node}}",
              "datasource": "Prometheus"
            }
          ],

          # Use a background color based on thresholds
          "colorBackground": true,

          # Define thresholds for changing the background color
          "thresholds": "0, 10",

          # Colors for the thresholds (green for normal, yellow for warning, red for critical)
          "colors": ["green", "yellow", "red"]
        },

        # Panel for displaying the CPU usage on the node by core
        {
          "title": "Node CPU Usage by Cores",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(container_cpu_usage_seconds_total{node=\"$node\"}[5m])) by (core)",
              "legendFormat": "{{core}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for displaying the CPU usage on the node as a percentage
        {
          "title": "Node CPU Usage by %",
          "type": "graph",
          "targets": [
            {
              "expr": "avg(rate(container_cpu_usage_seconds_total{node=\"$node\"}[5m])) by (instance) * 100",
              "legendFormat": "{{instance}}",
              "datasource": "Prometheus"
            }
          ],

          # Define thresholds for CPU usage percentage
          "thresholds": "0, 50, 90",

          # Colors for CPU usage thresholds (green for low usage, orange for medium, red for high)
          "colors": ["green", "orange", "red"]
        },

        # Panel for showing the number of pod restarts in a namespace
        {
          "title": "Namespace Pod Restarts",
          "type": "stat",
          "targets": [
            {
              "expr": "sum(kube_pod_status_restarts_total{namespace=\"$namespace\"})",
              "legendFormat": "{{namespace}}",
              "datasource": "Prometheus"
            }
          ],

          # Background color based on the number of restarts
          "colorBackground": true,

          # Thresholds for the number of restarts
          "thresholds": "0, 10",

          # Colors for restart thresholds
          "colors": ["green", "yellow", "red"]
        },

        # Panel for showing the CPU usage in a namespace
        {
          "title": "Namespace CPU Usage",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(container_cpu_usage_seconds_total{namespace=\"$namespace\"}[5m])) by (namespace)",
              "legendFormat": "{{namespace}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the number of running pods in a namespace
        {
          "title": "Namespace Running Pods",
          "type": "stat",
          "targets": [
            {
              "expr": "count(kube_pod_info{namespace=\"$namespace\"})",
              "legendFormat": "{{namespace}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the number of deployments in a namespace
        {
          "title": "Namespace Deployments",
          "type": "stat",
          "targets": [
            {
              "expr": "count(kube_deployment_labels{namespace=\"$namespace\"})",
              "legendFormat": "{{namespace}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the network traffic received in a namespace
        {
          "title": "Namespace Network Traffic (Receive)",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(container_network_receive_bytes_total{namespace=\"$namespace\"}[5m])) by (namespace)",
              "legendFormat": "{{namespace}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the network traffic transmitted in a namespace
        {
          "title": "Namespace Network Traffic (Transmit)",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(container_network_transmit_bytes_total{namespace=\"$namespace\"}[5m])) by (namespace)",
              "legendFormat": "{{namespace}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the memory usage in a namespace
        {
          "title": "Namespace Memory Usage",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(container_memory_usage_bytes{namespace=\"$namespace\"}) by (namespace)",
              "legendFormat": "{{namespace}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the network traffic received by a pod
        {
          "title": "Pod Network Traffic (Receive)",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(container_network_receive_bytes_total{pod=\"$pod\"}[5m])) by (pod)",
              "legendFormat": "{{pod}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the network traffic transmitted by a pod
        {
          "title": "Pod Network Traffic (Transmit)",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(container_network_transmit_bytes_total{pod=\"$pod\"}[5m])) by (pod)",
              "legendFormat": "{{pod}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the disk I/O reads by a pod
        {
          "title": "Pod Disk I/O Read",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(container_fs_reads_bytes_total{pod=\"$pod\"}[5m])) by (pod)",
              "legendFormat": "{{pod}}",
              "datasource": "Prometheus"
            }
          ]
        },

        # Panel for showing the disk I/O writes by a pod
        {
          "title": "Pod Disk I/O Write",
          "type": "graph",
          "targets": [
            {
              "expr": "sum(rate(container_fs_writes_bytes_total{pod=\"$pod\"}[5
